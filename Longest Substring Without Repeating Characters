def length_of_longest_substring(s):
    """
    Find the length of the longest substring without repeating characters.
    
    Parameters:
        s (str): The input string.
        
    Returns:
        int: The length of the longest substring without repeating characters.
    """
    # Initialize a dictionary to store the last seen index of each character.
    char_index_map = {}
    
    # Initialize two pointers:
    # `start` - marks the beginning of the current substring.
    # `max_length` - stores the length of the longest substring found so far.
    start = 0
    max_length = 0
    
    # Iterate through the string using the index and character.
    for end in range(len(s)):
        # If the current character is already in the dictionary and its index
        # is greater than or equal to the current `start`, it means there is a repetition.
        if s[end] in char_index_map and char_index_map[s[end]] >= start:
            # Move the `start` pointer to the index after the last occurrence of the current character.
            start = char_index_map[s[end]] + 1
        
        # Update the last seen index of the current character.
        char_index_map[s[end]] = end
        
        # Calculate the length of the current substring and update `max_length` if it's greater.
        max_length = max(max_length, end - start + 1)
    
    # Return the length of the longest substring without repeating characters.
    return max_length

# Example usage
if __name__ == "__main__":
    # Input string
    s = "abcabcbb"
    
    # Find and print the length of the longest substring without repeating characters
    result = length_of_longest_substring(s)
    print(f"The length of the longest substring without repeating characters is {result}.")
